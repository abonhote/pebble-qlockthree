#include <pebble.h>
#include <stdlib.h>

static Window *s_window;
static GFont s_time_font;

static TextLayer *s_text_layers[11];

static char s_line01[] = "-ES-ISCH---";
static char s_line02[] = "-FOIF-ZA---";
static char s_line03[] = "--VIERTEL--";
static char s_line04[] = "ZWANZG-VOR-";
static char s_line05[] = "--PUNKT-EIS";
static char s_line06[] = "ZWEI--FOIFI";
static char s_line07[] = "VIERI-DRU--";
static char s_line08[] = "ACHTI-NUNI-";
static char s_line09[] = "SÄCHSI-ELFI";
static char s_line10[] = "-SIEBNI----";
static char s_line11[] = "ZANI-ZWOLFI";

static char *s_lines[] =
{
    s_line01, s_line02, s_line03, s_line04, s_line05, s_line06,
    s_line07, s_line08, s_line09, s_line10, s_line11
};

static char spaced_text[11][128];

void add_spaces(const char *input, char *output, size_t output_size)
{
    size_t j = 0;
    for (size_t i = 0; input[i] != '\0' && j < output_size - 1; i++)
    {
        output[j++] = input[i];

        // Nur Leerzeichen einfügen, wenn das NÄCHSTE Byte ein neues Zeichen startet
        // UTF-8: Bytes mit höchstem Bit = 0 oder 11xxxxxx sind Zeichen-Anfänge
        if (input[i + 1] != '\0' && 
            j < output_size - 2 &&
            (input[i + 1] & 0xC0) != 0x80) {  // Kein Fortsetzungs-Byte
            output[j++] = ' ';
        }
    }
    output[j] = '\0';
    //APP_LOG(APP_LOG_LEVEL_DEBUG, "Result: '%s' (length: %zu)", output, j);
}

void window_load(Window *s_window)
{
    Layer *window_layer = window_get_root_layer(s_window);
    GRect bounds = layer_get_bounds(window_layer);
    s_time_font = fonts_load_custom_font(resource_get_handle(
            RESOURCE_ID_FONT_ANONYMOUSPRO_11));
    int font_height = 13;
    int border = 6;

    for (int i = 0; i < 11 ; i++)
    {
        APP_LOG(APP_LOG_LEVEL_DEBUG, "Y-Position Layer %d: %d", i,
                2 + (i * font_height));
        s_text_layers[i] = text_layer_create(GRect(border, border + (i * font_height),
                                             bounds.size.w-border, font_height));

        add_spaces(s_lines[i], spaced_text[i], sizeof(spaced_text[i]));
        text_layer_set_text(s_text_layers[i], spaced_text[i]);
        //text_layer_set_text(s_text_layers[i], s_lines[i]);
        text_layer_set_font(s_text_layers[i], s_time_font);
        layer_add_child(window_layer, text_layer_get_layer(s_text_layers[i]));
    }
}

void window_unload(Window *s_window)
{
    fonts_unload_custom_font(s_time_font);
}

static void deinit()
{
    for (int i = 0; i < 11; i++)
    {
        text_layer_destroy(s_text_layers[i]);
    }
    window_destroy(s_window);
}

void init()
{
    s_window = window_create();
    window_set_background_color(s_window, GColorBlack);
    window_set_window_handlers(
        s_window, (WindowHandlers)
    {
        .load = window_load, .unload = window_unload
    });
    window_stack_push(s_window, true);
}

int main()
{
    init();
    app_event_loop();
    deinit();
    return 0;
}


